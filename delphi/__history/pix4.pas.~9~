unit pix4;

interface

uses
  Windows, Registry, SysUtils, System.Classes;

type
  TPix4 = class

  public
    {public fields}
    {public methods}
    procedure LoadSerialPorts(items: TStrings);
  private
    {private fields}
    {private methods}

  end;

implementation

  procedure TPix4.LoadSerialPorts(items: TStrings);
  var
    RegIni: TRegistry;
    AList: TStringList;
    loop: Integer;
  begin
    items.Clear;
    RegIni := TRegistry.Create;
    AList := TStringList.Create; // Move the creation of AList outside the try-finally block
    try
      RegIni.RootKey := HKEY_LOCAL_MACHINE;
      if RegIni.OpenKeyReadOnly('HARDWARE\DEVICEMAP\SERIALCOMM') then // Directly open the required registry key
      begin
        RegIni.GetValueNames(AList);
        for loop := 0 to AList.Count - 1 do
          items.Add(RegIni.ReadString(AList[loop]));
      end;
    finally
      RegIni.Free;
      AList.Free;
    end;
  end;

  function GetSerialPortWithMatchingVIDPID(const VendorID, ProductID: Word): string;
var
  Port: string;
  DevInfo: HDEVINFO;
  DevData: SP_DEVINFO_DATA;
  MemberIndex: DWORD;
  RequiredSize: DWORD;
  Data: TRegKeyDataType;
  Buffer: array[0..MAX_PATH] of Char;
  VendorIDHex, ProductIDHex: string;
begin
  Result := '';
  VendorIDHex := Format('%.4x', [VendorID]);
  ProductIDHex := Format('%.4x', [ProductID]);

  // Create a device information set for COM ports
  DevInfo := SetupDiGetClassDevs(@GUID_DEVCLASS_PORTS, nil, 0, DIGCF_PRESENT);
  if DevInfo = INVALID_HANDLE_VALUE then
    Exit;

  try
    // Enumerate through the available devices
    MemberIndex := 0;
    while True do
    begin
      // Retrieve device information data for a specific device
      DevData.cbSize := SizeOf(SP_DEVINFO_DATA);
      if not SetupDiEnumDeviceInfo(DevInfo, MemberIndex, DevData) then
        Break;

      // Get the port name associated with the device
      if SetupDiGetDeviceRegistryProperty(DevInfo, DevData, SPDRP_FRIENDLYNAME, Data,
        @Buffer, SizeOf(Buffer), @RequiredSize) then
      begin
        Port := ExtractFilePath(Buffer);
        if Port <> '' then
        begin
          // Get the vendor identifier (VID) and product identifier (PID)
          if SetupDiGetDeviceRegistryProperty(DevInfo, DevData, SPDRP_HARDWAREID, Data,
            @Buffer, SizeOf(Buffer), @RequiredSize) then
          begin
            if Pos(VendorIDHex, Buffer) > 0 then
            begin
              if Pos(ProductIDHex, Buffer) > 0 then
              begin
                Result := Port;
                Exit;
              end;
            end;
          end;
        end;
      end;

      Inc(MemberIndex);
    end;
  finally
    // Clean up the device information set
    SetupDiDestroyDeviceInfoList(DevInfo);
  end;
end;


end.
